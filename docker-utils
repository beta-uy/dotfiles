#!/bin/bash

function docker-connect () {
  eval $(docker-machine env $1)
}

function docker-unset () {
  eval $(docker-machine env --unset)
}

function docker-cleanup () {
  docker rm `docker ps -aq`
  docker rmi `docker images -qf 'dangling=true'`
}

function docker-build () {
  local should_push=false
  local repository=
  local dockerfile=Dockerfile.prod
  local latest=true
  local additional_tags=''
  local verbose=false
  local context_path='.'
  local build_args=''

  while [ "$1" != "" ]; do
    case $1 in
      -v | --verbose )        verbose=true
                              ;;
      -p | --push )           should_push=true
                              ;;
      --no-latest )           latest=false
                              ;;
      -r | --repository )     shift
                              repository=$1
                              ;;
      -t | --tag )            shift
                              additional_tags=$1\ $additional_tags
                              ;;
      -c | --context-path )   shift
	                            context_path=$1
			                        ;;
      -f | --dockerfile )     shift
                              dockerfile=$1
                              ;;
      --build-args-file )     shift
                              build_args=$(read_build_args_file $1)
                              ;;
    esac
    shift
  done

  local build_command="docker build -q -f $dockerfile $build_args $@ '$context_path'"

  if [[ $verbose == true ]]; then
    echo "should_push:     $should_push"
    echo "repository:      $repository"
    echo "dockerfile:      $dockerfile"
    echo "latest:          $latest"
    echo "additional_tags: $additional_tags"
    echo "build_command:   $build_command"
    echo "context_path:    $context_path"
  fi

  [[ -z "$repository" ]] && echo 'Please provide a --repository' && return
  [ ! -f $dockerfile ] && echo 'Coud not find '$dockerfile && return

  eval $(docker-machine env --unset)

  # build_output=$(eval $build_command | tee /dev/tty)
  # image_tag=$(tail -n 1 <<< $build_output | sed s/Successfully\ built\ //)
  image_tag=$(eval $build_command | ruby -ne 'puts $_[7..18]')
  docker tag $image_tag $repository:$image_tag
  $latest && docker tag $image_tag $repository':latest'
  [[ ! -z "$additional_tags" ]] && for tag in $(echo $additional_tags); do docker tag $image_tag $repository:$tag; done

  if [[ $should_push == true ]]; then
    if gcloud docker -- push $repository; then
      local_images=$(docker images -q $repository)
      old_images=$(printf "$local_images" | tail -n +4) # latest, t1, t2
      $verbose && echo "Hosekeeping! Will delete the following images: $old_images"
      if [ $(wc -w <<< "$old_images") -gt 0 ]; then
        docker rmi $(for tag in `echo $old_images`; do echo $repository':'$tag; done)
      fi
    fi
  fi

  echo '==================================================='
  echo "Finished with tag: $image_tag"
}

function read_build_args_file () {
  local build_args
  for env_pair in `cat $1`; do;
    build_args=$build_args" --build-arg "$env_pair
  done
  echo $build_args
}

function compose-alias () {
    a='docker-compose -f docker-compose.yml -f docker-compose.'
    b='.yml'
    alias docker-compose=$a$1$b
    alias docker-compose
}

function swarm-inspect () {
  local filename=$(date "+%Y%m%d%H%M%S")_swarm-state.txt

  while [ "$1" != "" ]; do
    case $1 in
      -f | --filename )     shift
                            filename=$1
                            ;;
    esac
    shift
  done

  figlet services >> $filename

  for name in `docker service ls -q`; do
    docker service inspect $name >> $filename
  done

  figlet networks >> $filename

  for network in `docker network ls -q`; do
    docker network inspect $network >> $filename
  done

  cat $filename
}
